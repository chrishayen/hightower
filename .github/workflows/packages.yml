name: Build Linux Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-deb:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build release binaries
        run: cross build --release --target ${{ matrix.target }}

      - name: Build Debian package
        run: cargo deb --target ${{ matrix.target }} --no-build --no-strip

      - name: Get package name
        id: package
        run: |
          DEB_FILE=$(ls target/${{ matrix.target }}/debian/*.deb | head -1)
          echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT
          echo "deb_name=$(basename $DEB_FILE)" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.deb_name }}
          path: ${{ steps.package.outputs.deb_file }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.package.outputs.deb_file }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-rpm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm

      - name: Build release binaries
        run: cross build --release --target ${{ matrix.target }}

      - name: Build RPM package
        run: cargo generate-rpm --target ${{ matrix.target }}

      - name: Get package name
        id: package
        run: |
          RPM_FILE=$(ls target/${{ matrix.target }}/generate-rpm/*.rpm | head -1)
          echo "rpm_file=$RPM_FILE" >> $GITHUB_OUTPUT
          echo "rpm_name=$(basename $RPM_FILE)" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.rpm_name }}
          path: ${{ steps.package.outputs.rpm_file }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.package.outputs.rpm_file }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-aur:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-aur
        run: cargo install cargo-aur

      - name: Build AUR package
        run: |
          cargo aur
          ls -la
          find . -name "PKGBUILD" -o -name ".SRCINFO"

      - name: Create AUR tarball
        run: |
          if [ -f PKGBUILD ]; then
            tar -czf hightower-aur.tar.gz PKGBUILD .SRCINFO
          elif [ -f target/cargo-aur/PKGBUILD ]; then
            cd target/cargo-aur
            tar -czf ../../hightower-aur.tar.gz PKGBUILD .SRCINFO
          else
            echo "ERROR: Cannot find PKGBUILD"
            exit 1
          fi

      - name: Get package name
        id: package
        run: |
          echo "pkg_file=hightower-aur.tar.gz" >> $GITHUB_OUTPUT
          echo "pkg_name=hightower-aur.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.pkg_name }}
          path: ${{ steps.package.outputs.pkg_file }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.package.outputs.pkg_file }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
